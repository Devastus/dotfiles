-- local luasnip = require('luasnip')
-- local cmp = require('cmp')
-- local types = require('cmp.types')

-- local kind_icons = {
--   Text = "",
--   Method = "",
--   Function = "",
--   Constructor = "",
--   Field = "",
--   Variable = "",
--   Class = "ﴯ",
--   Interface = "",
--   Module = "",
--   Property = "ﰠ",
--   Unit = "",
--   Value = "",
--   Enum = "",
--   Keyword = "",
--   Snippet = "",
--   Color = "",
--   File = "",
--   Reference = "",
--   Folder = "",
--   EnumMember = "",
--   Constant = "",
--   Struct = "",
--   Event = "",
--   Operator = "",
--   TypeParameter = ""
-- }

-- local has_words_before = function()
--   local line, col = unpack(vim.api.nvim_win_get_cursor(0))
--   return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
-- end

-- cmp.setup({
--     enabled= function()
--       return vim.api.nvim_buf_get_option(0, 'buftype') ~= 'prompt'
--     end,
--     completion = {
--         autocomplete = false,
--     },
--     formatting = {
--         format = function(entry, vim_item)
--             -- Kind icons
--             vim_item.kind = string.format('%s %s', kind_icons[vim_item.kind], vim_item.kind) -- This concatonates the icons with the name of the item kind
--             -- Source
--             vim_item.menu = ({
--                 nvim_lsp = "[LSP]",
--                 luasnip = "[LuaSnip]",
--             })[entry.source.name]
--             return vim_item
--         end
--     },
--     snippet = {
--         expand = function(args)
--             require("luasnip").lsp_expand(args.body)
--         end
--     },
--     mapping = {
--         ['<C-b>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
--         ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
--         ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
--         ['<C-e>'] = cmp.mapping({
--             i = cmp.mapping.abort(),
--             c = cmp.mapping.close(),
--         }),
--         ['<CR>'] = cmp.mapping.confirm({ select = true }),
--         ["<Tab>"] = cmp.mapping(function(fallback)
--             if cmp.visible() then
--                 cmp.select_next_item()
--             elseif luasnip.expand_or_jumpable() then
--                 luasnip.expand_or_jump()
--             -- elseif has_words_before() then
--             --     cmp.complete()
--             else
--                 fallback()
--             end
--         end, { "i", "s" }),

--         ["<S-Tab>"] = cmp.mapping(function(fallback)
--             if cmp.visible() then
--                 cmp.select_prev_item()
--             elseif luasnip.jumpable(-1) then
--                 luasnip.jump(-1)
--             else
--                 fallback()
--             end
--         end, { "i", "s" }),
--     },
--     sources = cmp.config.sources({
--         { name = "nvim_lsp" },
--         { name = "luasnip" },
--     }),
--     sorting = {
--        comparators = {
--          cmp.config.compare.offset,
--          cmp.config.compare.exact,
--          cmp.config.compare.score,
--          function(entry1, entry2)
--              local kind1 = entry1:get_kind()
--              kind1 = kind1 == types.lsp.CompletionItemKind.Text and 100 or kind1
--              local kind2 = entry2:get_kind()
--              kind2 = kind2 == types.lsp.CompletionItemKind.Text and 100 or kind2
--              if kind1 ~= kind2 then
--                  if kind1 == types.lsp.CompletionItemKind.Snippet then
--                      return false
--                  end
--                  if kind2 == types.lsp.CompletionItemKind.Snippet then
--                      return true
--                  end
--                  local diff = kind1 - kind2
--                  if diff < 0 then
--                      return true
--                  elseif diff > 0 then
--                      return false
--                  end
--              end
--          end,
--          cmp.config.compare.sort_text,
--          cmp.config.compare.length,
--          cmp.config.compare.order,
--        },
--      },
-- })
